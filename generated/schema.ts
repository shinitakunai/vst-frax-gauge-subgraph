// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount_locked", Value.fromBigInt(BigInt.zero()));
    this.set("start_timestamp", Value.fromI32(0));
    this.set("lock_duration", Value.fromI32(0));
    this.set("end_timestamp", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stake", id.toString(), this);
    }
  }

  static load(id: string): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount_locked(): BigInt {
    let value = this.get("amount_locked");
    return value!.toBigInt();
  }

  set amount_locked(value: BigInt) {
    this.set("amount_locked", Value.fromBigInt(value));
  }

  get start_timestamp(): i32 {
    let value = this.get("start_timestamp");
    return value!.toI32();
  }

  set start_timestamp(value: i32) {
    this.set("start_timestamp", Value.fromI32(value));
  }

  get lock_duration(): i32 {
    let value = this.get("lock_duration");
    return value!.toI32();
  }

  set lock_duration(value: i32) {
    this.set("lock_duration", Value.fromI32(value));
  }

  get end_timestamp(): i32 {
    let value = this.get("end_timestamp");
    return value!.toI32();
  }

  set end_timestamp(value: i32) {
    this.set("end_timestamp", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value!.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }
}
